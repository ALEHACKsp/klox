klox fails even when test/benchmark/binary_trees.lox uses maxDepth = 6.
klox fails on instruction #18299, but probably deviates in stack or frames contents much sooner.

klox and clox differ in their stack indexing, as klox has an additional 0th entry.
(I believe this is a manual push of the anonymous outer main()-like function which I did for some printing or indexing bug in the original clox.)
To align the printing for using `diff`, I subtract 1 from the index as I print it.


The first diff of their output looks like:

--- binary_trees.clox.out	2020-05-22 05:21:00.234897943 -0400
+++ binary_trees.klox.out	2020-05-22 05:20:45.173806223 -0400
@@ -31,7 +31,7 @@
 instcount #15
 0[ <native fn> ] 
 instcount #16
-0[ 0.01158 ] 
+0[ 0.010276 ] 
 instcount #17
 
 instcount #18
@@ -33627,9 +33627,9 @@
 instcount #16811
 0[ 0 ] 1[ 1 ] 
 instcount #16812
-0[ 0 ] 1[ 1 ] 2[ 1 ] 
+0[ 0 ] 1[ 1 ] 2[ 0 ] 
 instcount #16813
-0[ 0 ] 1[ 1 ] 2[ 1 ] 3[ 64 ] 
+0[ 0 ] 1[ 1 ] 2[ 0 ] 3[ 64 ] 
 instcount #16814
 0[ 0 ] 1[ 1 ] 2[ false ] 
 instcount #16815

The stack diff at instruction #16 appears to be some time measurement (see the <native fn> call just prior).
The stack diff at instruction #16812 appears to be the actual problem.
The problem was observed over 3 runs to occur at exactly #16812, so is apparently deterministic.
The stack is different at instruction #16812, which means the problem occurred at instruction #16811.

With additional printing enabled, we see that this is opcode 5:
instcount #16811 5

This opcode is OP_GET_LOCAL, implemented in vm.cpp as follows:
      case OP_GET_LOCAL: {                                                      
        uint8_t slot = READ_BYTE();                                             
        push(vm.currentFrame->slots[slot]);                                     
        break;                                                                  
      }   


The implementation of OP_GET_LOCAL is fairly simple, and is working elsewhere.


Check that the slot being asked for is the same in both clox and klox...
clox: slot 2
klox: slot 2
So this is OK.


Next step:  add frames printing to see why/when klox's frame's slot 2 has different contents than clox's frame's slot 2.

The discrepancy is observed:
 instcount #16811 5
 0[ 0 ] 1[ 1 ] 
-0{ si:0, sc:1, <fn (anon)> | 0[ 0 ]  } 
+0{ si:0, sc:1, <fn (anon)> | 0[ <fn (anon)> ]  } 
 DANDEBUG slot 2
 instcount #16812 7
-0[ 0 ] 1[ 1 ] 2[ 1 ] 
-0{ si:0, sc:1, <fn (anon)> | 0[ 0 ]  } 
+0[ 0 ] 1[ 1 ] 2[ 0 ] 
+0{ si:0, sc:1, <fn (anon)> | 0[ <fn (anon)> ]  } 

Why does slot 2 make sense here, for either case (old code/new code)?
The reason slot 2 makes sense is that every frame's slots member seems to point 1 below where its arguments start, to give
    room for a first element which is the 'this'-like pointer of the class (in case of method call).  It seems that when used
    in the outermost function, the compiler will avoid making lookups towards this (in this case) vm.stack[-1] location, and
    that slots[2] actually refers to the valid vm.stack[1], because slots == &vm.stack[-1].  (Although technically this makes
    slots an invalid pointer.)


Additional printing confirms (on the clox side) that the distance between slots and stackTop is 3, although stack prints only
two elements:  

instcount #16811 5
 0[ 0 ] 1[ 1 ] 
-0{ si:0, sc:1, <fn (anon)> | 0[ 0 ] *0[ 0 ] *1[ 1 ]  } 
+0{ si:0, sc:1, <fn (anon)> | 0[ <fn (anon)> ]  } 
 DANDEBUG slot 2
-DANDEBUG slot is ok? 1
-DANDEBUG slots distance from stackTop: 3
+DANDEBUG you are here! slots[0]:<fn (anon)>, slots[1]:Tree instance
 instcount #16812 7
    
** The bigger problem here is that on the klox side, printing slots[0] and slots[1] shows elements which do not appear in the
stack, so somehow the frame->slots pointer has gotten out-of-sync with what is actually represented in the stack.


Adding manual assertions (because NDEBUG is true in release builds), this instruction is where things fail:
instcount #7273 57

Subsequent to this instruction (the next iteration through the outer for (;;) loop), the following abort() happens:
955	    if (!(vm.currentFrame->slots == tristack_at(&vm.tristack, vm.currentFrame->slotsIndex)))
956	      abort();

Op 57 is OP_RETURN


Trying to research this by manually enforcing assertions (-UNDEBUG) for RelWithDebInfo now causes a different issue as of instcount #246 (although it is in new triframes_validate() call, which could have its own bug):
instcount #246 4
...
klox: /home/daniel/workspace/klox/c/vm.cpp:74: Value* tristack_at(TriStack*, unsigned int): Assertion `index <= ts->stackDepth' failed.
(gdb) where
#0  0x00007f1486c88625 in raise () from /lib64/libc.so.6
#1  0x00007f1486c718d9 in abort () from /lib64/libc.so.6
#2  0x00007f1486c717a9 in __assert_fail_base.cold () from /lib64/libc.so.6
#3  0x00007f1486c80a66 in __assert_fail () from /lib64/libc.so.6
#4  0x0000000000421111 in tristack_at (ts=0x43e800 <vm>, index=38) at /home/daniel/workspace/klox/c/vm.cpp:74
#5  0x0000000000421da7 in triframes_validate () at /home/daniel/workspace/klox/c/vm.cpp:305
#6  0x00000000004245eb in run () at /home/daniel/workspace/klox/c/vm.cpp:970
#7  0x0000000000426b8a in interpret (
    source=0x1270210 "class Tree {\n  init(item, depth) {\n    this.item = item;\n    this.depth = depth;\n    if (depth > 0) {\n      var item2 = item + item;\n      depth = depth - 1;\n      this.left = Tree(item2 - 1, depth);\n"...) at /home/daniel/workspace/klox/c/vm.cpp:1387
#8  0x0000000000417c9d in runFile (path=0x7ffcdcf9096d "test/benchmark/binary_trees.lox") at /home/daniel/workspace/klox/c/main.cpp:83
#9  0x0000000000417f98 in main (argc=2, argv=0x7ffcdcf8fbe8) at /home/daniel/workspace/klox/c/main.cpp:198


Commenting out the call to triframes_validate() (which itself seems buggy), gets us back to an assertion failure as of instcount #7273.



===================================================
Fixed the above with the following commits:

commit 34db0922a4ca6b825e5f87ab42cb95d4480c872e (HEAD -> master)
Author: Daniel Kopko <dkopko@runbox.com>
Date:   Mon May 25 01:33:03 2020 -0400

    Fixes issue about possibly stale pointer to field under resize.

commit 078ae9035e45d87a8477fc80574644561e35b83d
Author: Daniel Kopko <dkopko@runbox.com>
Date:   Mon May 25 01:29:37 2020 -0400

    Fix FIXMEs related to cb-resize-safe for ObjInstance and ObjClass.

commit 5492a1e8b50b9242494e16449a0564273ce5dab6 (origin/master, origin/HEAD)
Author: Daniel Kopko <dkopko@runbox.com>
Date:   Mon May 25 00:55:06 2020 -0400

    Add some FIXME reminders.

commit 3bfdce21dbbbbc1ea7977b70ab5e3f63953599d4
Author: Daniel Kopko <dkopko@runbox.com>
Date:   Mon May 25 00:30:15 2020 -0400

    Fixes currentFrame->slots maintenance in triframes_ensureCurrentFrameIsMutable().  Fixes OP_RETURN bug on binary_trees.lox test.

===================================================


New issue on the GC thread at maxDepth = 8.

#0  0x00007fff00000001 in ?? ()
#1  0x0000000000426b1b in cb_bst_find_path (cb=0x7fc7bbb4e000, header_offset=<optimized out>, iter=0x7fc7be322080, key=0x7fc7be3222d0) at /home/daniel/workspace/cb/src/cb_bst.c:721
#2  0x0000000000427840 in cb_bst_lookup (cb=0x7fc7bbb4e000, header_offset=<optimized out>, key=<optimized out>, value=0x7fc7be3222c0) at /home/daniel/workspace/cb/src/cb_bst.c:778
#3  0x000000000040d565 in objtable_lookup (obj_table=0x7fc7be3236c8, obj_id=...) at /home/daniel/workspace/klox/c/cb_integration.cpp:357
#4  0x000000000040e056 in klox_value_shallow_comparator (cb=0x7fc7bbb4e000, lhs=0x7fc7bbc80790, rhs=0x7fc7bbb70e28) at /home/daniel/workspace/klox/c/cb_integration.cpp:597
#5  0x0000000000429db0 in cb_bst_insert (cb=0x7fc7be322bc8, region=0x7fc7bca49030, header_offset=0x7fc7bbb70d88, cutoff_offset=15839232, key=0x7fc7bbc80790, value=0x7fc7bbc807a0)
    at /home/daniel/workspace/cb/src/cb_bst.c:1336
#6  0x0000000000419186 in copy_entry_to_bst (key_term=0x7fc7bbc80790, value_term=0x7fc7bbc807a0, closure=0x7fc7be322760) at /home/daniel/workspace/klox/c/memory.cpp:570
#7  0x0000000000427922 in cb_bst_iter_visit (closure=0x7fc7be322760, func=0x419116 <copy_entry_to_bst(cb_term const*, cb_term const*, void*)>, iter=0x7fc7be322500, cb=0x7fc7bbb4e000)
    at /home/daniel/workspace/cb/src/cb_bst.h:339
#8  cb_bst_traverse (cb=0x7fc7bbb4e000, header_offset=<optimized out>, func=0x419116 <copy_entry_to_bst(cb_term const*, cb_term const*, void*)>, closure=0x7fc7be322760) at /home/daniel/workspace/cb/src/cb_bst.c:917
#9  0x0000000000419500 in cloneObject (cb=0x7fc7be322bc8, region=0x7fc7bca49030, id=..., object_offset=1246704) at /home/daniel/workspace/klox/c/memory.cpp:632
#10 0x000000000040f532 in copy_objtable_b (key_term=0x7fc7bbc80690, value_term=0x7fc7bbc806a0, closure=0x7fc7be322bb0) at /home/daniel/workspace/klox/c/cb_integration.cpp:1062
#11 0x0000000000427922 in cb_bst_iter_visit (closure=0x7fc7be322bb0, func=0x40f43a <copy_objtable_b(cb_term const*, cb_term const*, void*)>, iter=0x7fc7be322960, cb=0x7fc7bbb4e000)
    at /home/daniel/workspace/cb/src/cb_bst.h:339
#12 cb_bst_traverse (cb=0x7fc7bbb4e000, header_offset=<optimized out>, func=0x40f43a <copy_objtable_b(cb_term const*, cb_term const*, void*)>, closure=0x7fc7be322bb0) at /home/daniel/workspace/cb/src/cb_bst.c:917
#13 0x0000000000410db0 in gc_perform (rr=0x7fc7bca49000) at /home/daniel/workspace/klox/c/cb_integration.cpp:1616
#14 0x000000000040ef26 in gc_main_loop () at /home/daniel/workspace/klox/c/cb_integration.cpp:852
#15 0x0000000000412e15 in std::__invoke_impl<void, void (*)()> (__f=@0xadfeb8: 0x40ee69 <gc_main_loop()>) at /usr/include/c++/9/bits/invoke.h:60
#16 0x0000000000412dcd in std::__invoke<void (*)()> (__fn=@0xadfeb8: 0x40ee69 <gc_main_loop()>) at /usr/include/c++/9/bits/invoke.h:95
#17 0x0000000000412d7a in std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul> (this=0xadfeb8) at /usr/include/c++/9/thread:244
#18 0x0000000000412d50 in std::thread::_Invoker<std::tuple<void (*)()> >::operator() (this=0xadfeb8) at /usr/include/c++/9/thread:251
#19 0x0000000000412d34 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run (this=0xadfeb0) at /usr/include/c++/9/thread:195
#20 0x00007fc7c072c3d4 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#21 0x00007fc7c08574e2 in start_thread () from /lib64/libpthread.so.0
#22 0x00007fc7c042d6a3 in clone () from /lib64/libc.so.6


Questions:
1) Is this reproducible?  Yes.  Next two runs produced the same core stacktrace (including cutoff_offset=15839232 on frame #5, and object_offset=1246704 on frame #9)
2) Is it deterministic?  Yes.
3) Can it be reproduced with KLOX_SYNC_GC? Yes.
4) Can it be reproduced with TRACE output? Yes.

The TRACE output prints 3 million lines, but ends like:
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2369@1245216, obj: instance#2369@1245216,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2369@1245216 cloneObject() instance#2369@1245216,classname:"Tree" : NEW OFFSET = 16910336
TRACE cb_integration.cpp:1099:copy_objtable_b() +400 external, +64 internal bytes (bst external estimate:+442, internal estimate:+71) #2369 -> @16910336 NEWLYWHITE
TRACE cb_integration.cpp:1065:copy_objtable_b() preserving newly white object #2370.
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2370@1245776, obj: instance#2370@1245776,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2370@1245776 cloneObject() instance#2370@1245776,classname:"Tree" : NEW OFFSET = 16910800
TRACE cb_integration.cpp:1099:copy_objtable_b() +400 external, +64 internal bytes (bst external estimate:+442, internal estimate:+71) #2370 -> @16910800 NEWLYWHITE
TRACE cb_integration.cpp:1065:copy_objtable_b() preserving newly white object #2371.
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2371@1246368, obj: instance#2371@1246368,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2371@1246368 cloneObject() instance#2371@1246368,classname:"Tree" : NEW OFFSET = 16911264
TRACE cb_integration.cpp:1099:copy_objtable_b() +400 external, +64 internal bytes (bst external estimate:+442, internal estimate:+71) #2371 -> @16911264 NEWLYWHITE
TRACE cb_integration.cpp:1065:copy_objtable_b() preserving newly white object #2372.
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2372@1246704, obj: instance#2372@1246704,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2372@1246704 cloneObject() instance#2372@1246704,classname:"Tree" : NEW OFFSET = 16911728
./testit: line 4:  4826 Segmentation fault      (core dumped) ./c/BUILD/RelWithDebInfo/klox test/benchmark/binary_trees.lox

It seems like the GC is marching along doing the right thing before suddenly failing.  Could this perhaps be a CB resize of the GC CB causing issues?
Nope, added a print statement as first thing to klox_on_cb_resize() (which is also used by the GC thread), but saw no printing.


An interesting part of the coredump stacktrace is the call to klox_value_shallow_comparator(), which on line 597 is doing the following:
  if (OBJ_TYPE(lhsValue) == OBJ_STRING && OBJ_TYPE(rhsValue) == OBJ_STRING) {

OBJ_TYPE is a macro which ultimately looks-up into the thread_objtable to determine
the ObjType of the Value already determined to be an Obj.

Is there perhaps an issue with the gc-thread-local thread_objtable?

Per the coredump, the gc-thread-local thread_objtable looks like:
(gdb) print thread_objtable
$6 = {
  root_a = 1,
  root_b = 134664,
  root_c = 1,
  next_obj_id = {
    id = 0
  }
}


Whereas the main-thread-local thread_objtable looks like:
(gdb) print thread_objtable
$7 = {
  root_a = 15700464,
  root_b = 134664,
  root_c = 1,
  next_obj_id = {
    id = 32609
  }
}

Also, frame #3 (of the GC thread) shows we are actually attempting lookup in root_b:
(gdb) frame 3
#3  0x000000000040d7bb in objtable_lookup (obj_table=0x7fb2acff36c8, obj_id=...) at /home/daniel/workspace/klox/c/cb_integration.cpp:358
358	  ret = cb_bst_lookup(thread_cb, obj_table->root_b, &key_term, &value_term);

Yet frame #1 shows that the function being used as a comparator is unfamiliar:
(gdb) frame 1
#1  0x000000000042a9cb in cb_bst_find_path (cb=0x7fb2aa81e000, header_offset=<optimized out>, iter=0x7fb2acff1f20, key=0x7fb2acff2170) at /home/daniel/workspace/cb/src/cb_bst.c:721
721	        cmp = header->key_term_cmp(cb, key, &(curr_node->key));
(gdb) print header->key_term_cmp
$9 = (cb_term_comparator_t) 0x7ffc00000001


The correct comparator for objtable layers is cb_term_cmp(), as sent in objtable_layer_init().
(gdb) print cb_term_cmp
$1 = {int (const cb *, const cb_term *, const cb_term *)} 0x42f7b0 <cb_term_cmp>


So why is the GC thread's objtable's root_b's bst_header showing something other than cb_term_cmp?
Also, why does what it show look suspiciously like CB_BST_SENTINEL + some CB address?
Also, why did this code seemingly work a moment prior on all the other object insertions?

Next step, in objtable_lookup(), check that each root_[abc] is CB_BST_SENTINEL or else has the correct comparator.

Done via the following commit:

diff --git a/c/cb_integration.cpp b/c/cb_integration.cpp
index d638559..dc18a0a 100644
--- a/c/cb_integration.cpp
+++ b/c/cb_integration.cpp
@@ -351,6 +351,16 @@ objtable_lookup(ObjTable *obj_table, ObjID obj_id)
   cb_term value_term;
   int ret;
 
+  if (obj_table->root_b == 134664 && cb_bst_key_cmp_get(thread_cb, obj_table->root_b) == cb_term_cmp) {
+    printf("DANDEBUG things are pretty rosy right now...\n");
+  }
+
+  assert(obj_table->root_a == CB_BST_SENTINEL || cb_bst_key_cmp_get(thread_cb, obj_table->root_a) == cb_term_cmp);
+  assert(obj_table->root_b == CB_BST_SENTINEL || cb_bst_key_cmp_get(thread_cb, obj_table->root_b) == cb_term_cmp);
+  assert(obj_table->root_c == CB_BST_SENTINEL || cb_bst_key_cmp_get(thread_cb, obj_table->root_c) == cb_term_cmp);
+
+
+
   cb_term_set_u64(&key_term, obj_id.id);
 
   ret = cb_bst_lookup(thread_cb, obj_table->root_a, &key_term, &value_term);


The output now shows:

TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2371@1246368, obj: DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
instance#2371@1246368,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2371@1246368 cloneObject() DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
instance#2371@1246368,classname:"Tree" : NEW OFFSET = 16911264
TRACE cb_integration.cpp:1113:copy_objtable_b() +400 external, +64 internal bytes (bst external estimate:+442, internal estimate:+71) #2371 -> @16911264 NEWLYWHITE
TRACE cb_integration.cpp:1079:copy_objtable_b() preserving newly white object #2372.
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2372@1246704, obj: DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
instance#2372@1246704,classname:"Tree"
TRACE cb_integration.cpp:66:~scoped_pin() end pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:597:cloneObject() #2372@1246704 cloneObject() DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
DANDEBUG things are pretty rosy right now...
instance#2372@1246704,classname:"Tree" : NEW OFFSET = 16911728
TRACE cb_integration.cpp:1113:copy_objtable_b() +400 external, +64 internal bytes (bst external estimate:+442, internal estimate:+71) #2372 -> @16911728 NEWLYWHITE
TRACE cb_integration.cpp:1079:copy_objtable_b() preserving newly white object #2373.
TRACE cb_integration.cpp:59:scoped_pin() begin pin @ 0 (cb_offset_t deriveMutableObjectLayer(cb**, cb_region*, ObjID, cb_offset_t):397)
TRACE memory.cpp:402:deriveMutableObjectLayer() src: #2373@1247272, obj: klox: /home/daniel/workspace/klox/c/cb_integration.cpp:359: cb_offset_t objtable_lookup(ObjTable*, ObjID): Assertion `obj_table->root_b == CB_BST_SENTINEL || cb_bst_key_cmp_get(thread_cb, obj_table->root_b) == cb_term_cmp' failed.
./testit: line 4:  7178 Aborted                 (core dumped) ./c/BUILD/RelWithDebInfo/klox test/benchmark/binary_trees.lox


This makes clear that some aspect of the ongoing work has clobbered the cb_bst_header (in particular, the key_term_cmp field) of objtable->root_b.

If we look at where the most recent allocation landed, it was @16911728.
16911728 - 134664 = 16777064 = FFFF68h
This difference is uncomfortably close to a power of 2 (2^24).

Under modulus wraparound, the difference between the two locations is only
151 bytes:
FFFFFFh - FFFF68h = 97h = 151

The allocation @16911728 was 464 bytes, and immediately afterwards the assertion started to fail, so it seems clear that this clobber took place.

How is this possible if the GC thread should exclusively be writing to a new region of the old CB?
  * Perhaps the CB's data start does not adequately encompass this data which must remain unclobbered?

How is this possible if the area where this layer of the objtable exists (@134664) of the old CB has been mprotect()ed?

Answer:  The thread_cb was getting stored in the gc_request_response before it was done being allocated from.  By the time the request was made
the present thread_cb was different.  The cb_regions in use by the GC thread were valid for the new CB, but caused overlaps and clobbers on the
old CB.










